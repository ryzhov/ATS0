####### Global Parameters #########

debug=3
log_stderror=no
log_facility=LOG_LOCAL0

fork=yes
children=4

#debug=6
#fork=no
#log_stderror=yes

disable_tcp=yes
auto_aliases=no
port=5060

####### Modules Section ########

#set module path
mpath="/usr/local/lib64/opensips/modules/"

loadmodule "db_mysql.so"
loadmodule "signaling.so"
loadmodule "sl.so"
loadmodule "tm.so"

loadmodule "rr.so"
modparam("rr", "append_fromtag", 0)

loadmodule "maxfwd.so"

loadmodule "usrloc.so"
modparam("usrloc", "db_mode",   2)
modparam("usrloc", "db_url", "mysql://opensips:pass4sips@localhost/opensips")
modparam("usrloc", "nat_bflag", 6)

loadmodule "registrar.so"
modparam("registrar", "max_contacts", 5)
modparam("registrar", "default_expires", 320)
modparam("registrar", "min_expires", 720)
modparam("registrar", "max_expires", 920)
modparam("registrar", "received_avp", "$avp(rcv)")
#modparam("registrar", "nat_flag", 6)

loadmodule "textops.so"
loadmodule "mi_fifo.so"

# Управляющий интерфейс OpenSIPS
loadmodule "mi_datagram.so"
modparam("mi_datagram", "socket_name", "/var/run/opensips.sock")
modparam("mi_datagram", "children_count", 10)
modparam("mi_datagram", "unix_socket_mode", 0666)

loadmodule "uri.so"
modparam("uri", "use_uri_table", 0)

loadmodule "auth.so"
loadmodule "auth_db.so"
modparam("auth_db", "db_url", "mysql://opensips:pass4sips@localhost/opensips")

#loadmodule "alias_db.so"
#modparam("alias_db","db_url","mysql://opensips:pass4sips@localhost/opensips")

loadmodule "domain.so"
modparam("domain", "db_url", "mysql://opensips:pass4sips@localhost/opensips")
modparam("domain", "db_mode", 1)   # Use caching

loadmodule "dialog.so"

# -- include Perl support --
loadmodule "perl.so"
modparam("perl", "filename", "/usr/local/etc/opensips/perlfunctions.pl")
modparam("perl", "modpath", "/usr/local/lib64/opensips/perl") 

loadmodule "avpops.so"
modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")
modparam("alias_db|auth_db|usrloc|uri", "use_domain", 1)

loadmodule "nathelper.so"
modparam("nathelper", "natping_interval", 0)
modparam("nathelper", "received_avp", "$avp(rcv)")

loadmodule "nat_traversal.so"

loadmodule "mediaproxy.so"
modparam("mediaproxy","mediaproxy_socket", "/var/run/mediaproxy.sock")

####### Routing Logic ########

# Сюда попадает входящий пакет
route {

    	if (!mf_process_maxfwd_header("10")) {
	    sl_send_reply("483","Too Many Hops");
	    exit;
	}
	
	if (msg:len >= 2048 ) {
	    sl_send_reply("513", "Message too big");
	    exit;
	}

	# Добавляем флаг nat
	if (!is_method("REGISTER|MESSAGE")) {
	    if (nat_uac_test("11")) {
		record_route(";nat=yes");
	    } else {
		record_route();
	    }
	}

	# Обрабатываем запросы активного звонка
	if (has_totag()) {
	    if (loose_route()) {
		if (method=="BYE" || method=="CANCEL") {
		    end_media_session();
		} else {
		    # Вносим изменения в заголовок для NAT
		    if ((nat_uac_test("1") || check_route_param("nat=yes"))) {
			fix_nated_contact();
			force_rport();
			use_media_proxy();
			setflag(11); # флаг, что удалённая сторона за NAT
		    }
		}
		route(RELAY);
		exit;
	    } else {
		# Обработка для ACK пакетов
		if (is_method("ACK")) {
		    if (t_check_trans()) {
			if ((nat_uac_test("1") || check_route_param("nat=yes"))) {
			    fix_nated_contact();
			    force_rport();
			    use_media_proxy();
			    setflag(11); # флаг, что удалённая сторона за NAT
			}
			route(RELAY);
			exit;
		    }
		}
	    }
	}

	# CANCEL && BYE от оригинатора
	if (is_method("CANCEL|BYE")) {
	    if (t_check_trans()) {
		xlog("L_INFO", "CANCEL|BYE notag -> end_media_session,route(RELAY),exit");
		end_media_session();
	    } else {
		xlog("L_INFO", "CANCEL|BYE notag -> route(RELAY),exit");
	    }
	    route(RELAY);
	    exit;
	}

	# Включаем keepalive для клиента за NAT
	if (method=="INVITE" && !has_totag() && nat_uac_test("11")) {
	    nat_keepalive();
	}

	# Разбираем запросы
	if (is_method("REGISTER")) {
	    route(ROUTE_REGISTER);
	} else {
	    if (is_method("INVITE")) {
		route(ROUTE_INVITE);
	    } else {
		# Другие типы запросов не поддерживаем
		sl_send_reply("405", "Method $rm is not allowed");
	    }
	}
}

# Пересылка запроса
route[RELAY] {
    t_on_failure("FAILURE_ROUTE_1");
    t_on_reply("ONREPLY_ROUTE_1");
    if (!t_relay()) {
	sl_reply_error();
    }
    exit;
}

# Обработка регистрации
route[ROUTE_REGISTER] {
    
    if (is_uri_host_local()) {
	sl_send_reply("100", "Trying");
	perl_exec("authorize");
	if (avp_check("$avp(auth)","eq/ok/g")) {
	    if (nat_uac_test("7")) {
		xlog("L_INFO", "-- ok[nat] -> save_location");
		fix_nated_register();
		force_rport();
	    } else {
		xlog("L_INFO", "-- ok -> save_location");
	    }
	    save("location");
	} else {
	    if (avp_check("$avp(auth)","eq/digest/g")) {
		if(!www_authorize("", "subscriber")) {
		    xlog("L_INFO", "-- digest -> www_challenge");
		    www_challenge("", "0");
		} else {	    
		    if (nat_uac_test("7")) {
			xlog("L_INFO", "-- digest[nat] -> save_location");
			fix_nated_register();
			force_rport();
		    } else {
			xlog("L_INFO", "-- digest -> save_location");
		    }
		    save("location");
		}
	    } else {
		if (avp_check("$avp(auth)","eq/undefined/g")) {
		    xlog("L_INFO", "-- undefined -> www_challenge");
		    www_challenge("", "0");
		} else {
		    xlog("L_INFO", "-- fail -> www_challenge --");
		    www_challenge("", "0");
		}
	    }
	}
    } else {
	sl_send_reply("403", "Forbidden. Domain $od not found");
    }
    
    exit;
}

route[ROUTE_INVITE] {
    	# Звонок от нашего пользователя
    	if (is_from_local()) {
		
		# Звонок локальному пользователю
		if (is_uri_host_local()) {
		    # Включаем NAT
		    if (nat_uac_test("11")) {
			# Если это инициализирующий запрос
			if (!has_totag()) {
			    engage_media_proxy(); # инициализирует модуль mediaproxy
			}
			force_rport();
			fix_nated_contact();
			setflag(10); # флаг, что оригинатор за NAT
		    }
		    # Ищем пользователя в location database. 
		    if (!lookup("location")) {
			sl_send_reply("404", "User not found");
			exit;
		    }
		    route(RELAY);
			
                # Звонок на внешний домен
		} else {
		    sl_send_reply("403", "Forbidden");
		}
	} else {
            # Вызов из внешнего домена
	    sl_send_reply("403", "Forbidden");
	}
}#route[ROUTE_INVITE] 


# ONREPLY_ROUTE: вызывается при сообщении от терминатора
onreply_route[ONREPLY_ROUTE_1] {
    if ((isflagset(10) || isflagset(11)) && (status=~"(180)|(183)|2[0-9][0-9]")) {
	if (!search("^Content-Type:[ ]*application/sdp*")) {
	    use_media_proxy();
	}
    }
    
    if (nat_uac_test("1")) {
	fix_nated_contact();
    }
}

# FAILURE_ROUTE:  вызывается если случился сбой вызова
failure_route[FAILURE_ROUTE_1] {
    append_branch();
    if (!t_relay()) {
	exit;
    }
}
