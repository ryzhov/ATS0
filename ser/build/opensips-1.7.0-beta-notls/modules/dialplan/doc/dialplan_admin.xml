<!-- Module User's Guide -->

<chapter>
    <title>&adminguide;</title>
	
	<section>
	<title>Overview</title>
	<para>
	This module implements generic string translations based on matching and
	replacement rules. It can be used to manipulate R-URI or a PV and to 
	translated to a new format/value.
	</para>
	</section>

	<section>
	<title>How it works</title>
	<para>
	At startup, the module will load a set of transformation rules from a 
	database. Every database raw will be stored in memory as a translation 
	rule. Each rule will describe how the matching should be made, how the 
	input value should be modified and which attributes should be set for 
	the matching transformation.
	</para>
	<para>
	The module expects an input value which will be matched against a rules
	via regexp or string matching. Overlapping matching expressions can be
	controlled via priorities. Once a rule is matched, the defined 
	transformation (if any) is applied and the result is returned as output 
	value. Also, if any string attribute is associated to the rule, this will 
	be returned to the script along with the output value.
	</para>
	<para>
	<emphasis> The first matching rule will be processed.</emphasis>
	</para>
	</section>

	<section>
	<title>Usage cases</title>
	<para>
	The module can be used to implement dialplans - do to auto completion of 
	the dial numbers (like national to international), to convert generic 
	numbers to specific numbers (like for emergency numbers).
	</para>
	<para>
	Also the module can be used for detecting range or sets of numbers mapped 
	on a service/case - attributes string can be used here to store extra 
	information about the service/case.
	</para>
	<para>
	Non-SIP string translation can be implemented - like converting country 
	names from all possible formats to a canonical format:
	(UK, England, United Kingdom) -> GB.
	</para>
	<para>
	Any other string-base translation or detection for whatever other purposes.
	</para>
	</section>

	<section>
		<title>Database structure and usage</title>
		<para>
		Depending what kind of operation (translation, matching, etc) you want
		to do with the module, you need to appropriate populate the DB records.
		</para>
		<para>
		The definition of the tables used by the dialplan module can be found
		at <ulink url="http://www.opensips.org/html/db-schema.html#AEN1501">&osipsdbdocslink;#AEN1501</ulink>
		</para>
		<section>
		<title>What to place in table</title>

		<section>
		<title>String translation (regexp detection, subst translation)</title>
			<para>
			Recognize a number block in all forms (international, national)
			and convert it to a canonical format (e.164)
			</para>
			<itemizedlist>
			<listitem>
			<para>
				<emphasis>match-op</emphasis> = 1 (regexp)
			</para>
			</listitem>
			<listitem>
			<para>
				<emphasis>match_exp</emphasis> = "^(0040|\+40|0|40)21[0-9]+" ;
				regular expresion that will be used to match with this rule (if
				the rule should be applied for the input string)
			</para>
			</listitem>
			<listitem>
			<para>
				<emphasis>match_len</emphasis> = 0 (not used for regexp op)
			</para>
			</listitem>
			<listitem>
			<para>
				<emphasis>subst_exp</emphasis> = "^(0040|\+40|0|40)(.+)" ;
				regular expresion used to do the transformation (first part
				of the subst operation)
			</para>
			</listitem>
			<listitem>
			<para>
				<emphasis>repl_exp</emphasis> = "40\2" ; second part of the 
				subst (output) - linked to the subst_exp field; when both
				defined, they work as a subst()
			</para>
			</listitem>
			</itemizedlist>
		</section>

		<section>
		<title>String translation (regexp detection, replacement)</title>
			<para>
			Recognize the name of a country (multiple languages) and convert
			it to a single fix value
			</para>
			<itemizedlist>
			<listitem>
			<para>
				<emphasis>match-op</emphasis> = 1 (regexp)
			</para>
			</listitem>
			<listitem>
			<para>
				<emphasis>match_exp</emphasis> = "^((Germany)|(Germania)|(Deutschland)|(DE))" ;
				regular expresion that will be used to match with this rule (if
				the rule should be applied for the input string)
			</para>
			</listitem>
			<listitem>
			<para>
				<emphasis>match_len</emphasis> = 0 (not used for regexp op)
			</para>
			</listitem>
			<listitem>
			<para>
				<emphasis>subst_exp</emphasis> = NULL ;
				when translation is actually a replacement, this field must 
				be NULL.
			</para>
			</listitem>
			<listitem>
			<para>
				<emphasis>repl_exp</emphasis> = "DE" ; static string to 
				replace the input - whenever this rule will match, it will
				return this string as output.
			</para>
			</listitem>
			</itemizedlist>
		</section>

		<section>
		<title>Number detection (regexp detection, no replacement)</title>
			<para>
			Recognize a block of numbers as belong to a single service and 
			signalize this via an attribute.
			</para>
			<itemizedlist>
			<listitem>
			<para>
				<emphasis>match-op</emphasis> = 1 (regexp)
			</para>
			</listitem>
			<listitem>
			<para>
				<emphasis>match_exp</emphasis> = "^021456[0-9]{5}" ;
				regular expresion that will be used to match with this rule (if
				the rule should be applied for the input string)
			</para>
			</listitem>
			<listitem>
			<para>
				<emphasis>match_len</emphasis> = 0 (not used for regexp op)
			</para>
			</listitem>
			<listitem>
			<para>
				<emphasis>subst_exp</emphasis> = NULL ;
				no translation
			</para>
			</listitem>
			<listitem>
			<para>
				<emphasis>repl_exp</emphasis> = NULL ; 
				no translation
				</para>
			</listitem>
			<listitem>
			<para>
				<emphasis>attrs</emphasis> = "serviceX" ; 
				whatever string you will get into OpenSIPS script and it will 
				provide you more information (totally custom)
				</para>
			</listitem>
			</itemizedlist>
		</section>

		<section>
		<title>String conversion (equal detection, replacement)</title>
			<para>
			Recognize a fix string/number and replace it with something fix.
			</para>
			<itemizedlist>
			<listitem>
			<para>
				<emphasis>match-op</emphasis> = 0 (equal)
			</para>
			</listitem>
			<listitem>
			<para>
				<emphasis>match_exp</emphasis> = "SIP server" ;
				string to be matched
			</para>
			</listitem>
			<listitem>
			<para>
				<emphasis>match_len</emphasis> = 10
			</para>
			</listitem>
			<listitem>
			<para>
				<emphasis>subst_exp</emphasis> = NULL ;
				no subst translation
			</para>
			</listitem>
			<listitem>
			<para>
				<emphasis>repl_exp</emphasis> = "OpenSIPS" ; 
				output string
				</para>
			</listitem>
			</itemizedlist>
		</section>

		</section>

	</section>



	<section>
	<title>Dependencies</title>
	<section>
		<title>&osips; Modules</title>
		<para>
		The following modules must be loaded before this module:
			<itemizedlist>
			<listitem>
			<para>
				<emphasis>None</emphasis>
			</para>
			</listitem>
			</itemizedlist>
		</para>
	</section>


	<section>
		<title>External Libraries or Applications</title>
		<para>
		The following libraries or applications must be installed before 
		running &osips; with this module loaded:
			<itemizedlist>
			<listitem>
			<para>
				<emphasis>libpcre-dev - the development libraries of <ulink url="http://www.pcre.org/">PCRE</ulink></emphasis>.
			</para>
			</listitem>
			</itemizedlist>
		</para>
	</section>
	</section>


	<section>
	<title>Exported Parameters</title>
	<section>
		<title><varname>db_url</varname> (string)</title>
		<para>
		The translation rules will be loaded using this database url.
		</para>
		<para>
		<emphasis>
			Default value is 
				<quote>&defaultdb;</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>db_url</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialplan", "db_url", "mysql://user:passwb@localhost/db")
...
		</programlisting>
		</example>
	</section>

	<section>
		<title><varname>table_name</varname> (string)</title>
		<para>
		The table's name from which to load the translation rules.
		</para>
		<para>
		<emphasis>
			Default value is <quote>dialplan</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>table_name</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialplan", "table_name", "my_table")
...
		</programlisting>
		</example>
	</section>

	<section>
		<title><varname>dpid_col</varname> (string)</title>
		<para>
		The column name to store the dialplan ID group.
		</para>
		<para>
		<emphasis>
			Default value is <quote>dpid</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>dpid_col</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialplan", "dpid_col", "column_name")
...
		</programlisting>
		</example>
	</section>

	<section>
		<title><varname>pr_col</varname> (string)</title>
		<para>
		The column name to store the priority of the corresponding rule from the 		database raw.
		</para>
		<para>
		<emphasis>
			Default value is <quote>pr</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>pr_col</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialplan", "pr_col", "column_name")
...
		</programlisting>
		</example>
	</section>

	<section>
		<title><varname>match_op_col</varname> (string)</title>
		<para>
		The column name to store the type of matching of the rule.
		</para>
		<para>
		<emphasis>
			Default value is <quote>match_op</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>match_op_col</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialplan", "match_op_col", "column_name")
...
		</programlisting>
		</example>
	</section>

	<section>
		<title><varname>match_exp_col</varname> (string)</title>
		<para>
		The column name to store the rule match expression.
		</para>
		<para>
		<emphasis>
			Default value is <quote>match_exp</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>match_exp_col</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialplan", "match_exp_col", "column_name")
...
		</programlisting>
		</example>
	</section>

	<section>
		<title><varname>match_len_col</varname> (string)</title>
		<para>
		The column name to store the length of a string matching the 
		match expression.
		</para>
		<para>
		<emphasis>
			Default value is <quote>match_len</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>pr_col</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialplan", "match_len_col", "column_name")
...
		</programlisting>
		</example>
	</section>

	<section>
		<title><varname>subst_exp_col</varname> (string)</title>
		<para>
		The column name to store the rule's substitution expression.
		</para>
		<para>
		<emphasis>
			Default value is <quote>subst_exp</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>pr_col</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialplan", "subst_exp_col", "column_name")
...
		</programlisting>
		</example>
	</section>

		<section>
		<title><varname>repl_exp_col</varname> (string)</title>
		<para>
		The column name to store the rule's replacement expression.
		</para>
		<para>
		<emphasis>
			Default value is <quote>repl_exp</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>repl_exp_col</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialplan", "repl_exp_col", "column_name")
...
		</programlisting>
		</example>
	</section>

	<section>
		<title><varname>attrs_col</varname> (string)</title>
		<para>
		The column name to store the rule's attributes to be set to the message.
		</para>
		<para>
		<emphasis>
			Default value is <quote>attrs</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>attrs_col</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialplan", "attrs_col", "column_name")
...
		</programlisting>
		</example>
	</section>

	<section>
		<title><varname>attrs_pvar</varname> (string)</title>
		<para>
		The pvar to store the rule's attributes, after translation (dp_translate() succeeds).
		This parameter can be any PVAR that can be written.
		</para>
		<para>
		<emphasis>
			Default value is <quote>NULL</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>attrs_pvar</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("dialplan", "attrs_pvar", "$avp(dest)")
...
		</programlisting>
		</example>
	</section>

	</section>


	<section>
	<title>Exported Functions</title>
	
	<section>
	<title>
		<function moreinfo="none">dp_translate(id, src/dest)</function>
	</title>
	<para>
	Will try to translate the src string into dest string according to 
	the translation rules with dialplan ID equal to id.
	</para>
	<para>Meaning of the parameters is as follows:</para>
	<itemizedlist>
	<listitem>
		<para>
		<emphasis>id</emphasis> -the dialplan id of the possible matching rules.
		This parameter can have the following types:
		</para>
		<itemizedlist>
			<listitem>
			<para><emphasis>integer</emphasis>- the dialplan id is statically 
			assigned </para>
			</listitem>
			
			<listitem>
			<para><emphasis>pvar</emphasis> 
			-the dialplan id is the value of an existing pseudo-variable
			(as interger value)
			</para>
			</listitem>
		</itemizedlist>
	</listitem>

	<listitem>
		<para>
		<emphasis>src/dest</emphasis> - input and output of the function.
		If this parameter is missing the default parameter 
		<quote>ruri.user/ruri.user</quote> will be used, thus translating 
		the request uri.
		</para>
		<para>
		The <quote>src</quote> variable can be any type of pseudo-variable.
		</para>
		<para>
		The <quote>dest</quote> variable  can be also any type of 
		pseudo-variable, but it must be a writtable one.
		</para>
	</listitem>
	</itemizedlist>
	<para>
	This function can be used from REQUEST_ROUTE, BRANCH_ROUTE.
	</para>
	<example>
	<title><function>dp_translate</function> usage</title>
	<programlisting format="linespecific">
...
dp_translate("240", "$ruri.user/$avp(dest)");
xlog("translated to var $avp(dest) \n");
...
	</programlisting>
	</example>
	<example>
	<title><function>dp_translate</function> usage</title>
	<programlisting format="linespecific">
...
$avp(src) = $ruri.user;
dp_translate("$var(x)", "$avp(src)/$var(y)");
xlog("translated to var $var(y) \n");
...
	</programlisting>
	</example>

	</section>

	</section>


	<section>
	<title>Exported MI Functions</title>

		<section>
			<title><varname>dp_reload</varname></title>
			<para>
			It will update the translation rules, loading the database info.
			</para>
		<para>
		Name: <emphasis>dp_reload</emphasis>
		</para>
		<para>Parameters: <emphasis>none</emphasis></para>
 		<para>
		MI DATAGRAM Command Format:
		</para>
        <programlisting  format="linespecific">
		:dp_reload:
		_empty_line_
		</programlisting>
		</section>
    
    <section>
			<title><varname>dp_translate</varname></title>
			<para>
                It will apply a translation rule identified by a dialplan
                id and an input string.
			</para>
		<para>
		Name: <emphasis>dp_translate</emphasis>
		</para>
        <para>Parameters: <emphasis>2</emphasis></para>
        	<itemizedlist>
                <listitem>
                <para><emphasis>Dial plan ID</emphasis></para>
                </listitem>
                <listitem>
                <para><emphasis>Input String</emphasis></para>
                </listitem>
            </itemizedlist>
 		<para>
		MI DATAGRAM Command Format:
		</para>
        <programlisting  format="linespecific">
            :dp_translate:
            dpid
            input
		_empty_line_
		</programlisting>
		</section>
	</section>

	<section>
		<title>Installation</title>
		<para>
		The modules requires one table in OpenSIPS database: dialplan.The SQL 
		syntax to create them can be found in dialplan-create.sql     
		script in the database directories in the opensips/scripts folder.
		You can also find the complete database documentation on the
		project webpage, &osipsdbdocslink;.
		</para>
	</section>



</chapter>
