<!-- Module User's Guide -->

<chapter>
	
	<title>&adminguide;</title>
	
	<section>
	<title>Overview</title>
	<para>
	The Load-Balancer module comes to provide traffic routing based on load. 
	Shortly, when &osips; routes calls to a set of destinations, it is able 
	to keep the load status (as number of ongoing calls) of each destination 
	and to choose to route to the less loaded destination (at that moment). 
	&osips; is aware of the capacity of each destination - it is preconfigured 
	with the maximum load accepted by the destinations. To be more precise, 
	when routing, &osips; will consider the less loaded destination not the 
	destination with the smallest number of ongoing calls, but the destination 
	with the largest available slot.
	</para>
	<para>
	Also the module has the capability to do failover (to try a new destination
	if the selected one done not responde), to keep state of the destinations 
	(to remember the failed destination and avoid using them agai) and to 
	check the health of the destination (by doing probing of the destination 
	and auto re-enabling).
	</para>
	</section>

	<section>
	<title>How it works</title>
		<para>
		Please refer to the Load-Balancer tutorial from the &osips; website:
		<ulink url='http://www.opensips.org/index.php?n=Resources.DocsTutLoadbalancing'>http://www.opensips.org/index.php?n=Resources.DocsTutLoadbalancing</ulink>.
		</para>
	</section>

	<section>
	<title>Probing and Disabling destinations</title>
	<para>
	The module has the capability to monitor the status of the destinations by
	doing SIP probing (sending SIP requests like OPTIONS).
	</para>
	<para>
	For each destination, you can configure what kind of probing should be 
	done (probe_mode column):
	</para>
	<itemizedlist>
	<listitem>
		<para><emphasis>(0)</emphasis> - no probing at all;</para>
	</listitem>
	<listitem>
		<para><emphasis>(1)</emphasis> - probing only when the destination is
		in disabled mode (disabling via MI command will competely stop the 
		probing also). The destination will be automatically re-enabled
		when the probing will succeed next time;</para>
	</listitem>
	<listitem>
		<para><emphasis>(2)</emphasis> - probing all the time. If disabled, 
		the destination will be automatically re-enabled when the probing 
		will succeed next time;
		</para>
	</listitem>
	</itemizedlist>
	<para>
	A destination can become disabled in two ways:
	<itemizedlist>
	<listitem>
		<emphasis>script detection</emphasis> - by calling from script the
		lb_disabled() function after try the destination. In this case, if
		probing mode for the destination is (1) or (2), the destination will
		be automatically re-enabled when the probing will succeed.
	</listitem>
	<listitem>
		<emphasis>MI command</emphasis> - by calling the lb_status MI
		command for disabling (on demand) the destination. If so, the probing
		and re-enabling of this destination will be completly disabled until
		you re-enable it again via MI command - this is designed to allow 
		controlled and complete disabling of some destination during 
		maintenance.
	</listitem>
	</itemizedlist>
	</para>
	</section>

	<section>
	<title>Dependencies</title>
	<section>
		<title>&osips; Modules</title>
		<para>
		The following modules must be loaded before this module:
			<itemizedlist>
			<listitem>
			<para>
				<emphasis>Dialog</emphasis> - Dialog module
			</para>
			</listitem>
			<listitem>
			<para>
				<emphasis>Dialog</emphasis> - TM module (only if probing enabled)
			</para>
			</listitem>
			<listitem>
			<para>
				<emphasis>database</emphasis> - one of the DB modules
			</para>
			</listitem>
			</itemizedlist>
		</para>
	</section>


	<section>
		<title>External Libraries or Applications</title>
		<para>
		The following libraries or applications must be installed before 
		running &osips; with this module loaded:
			<itemizedlist>
			<listitem>
			<para>
				<emphasis>None</emphasis>.
			</para>
			</listitem>
			</itemizedlist>
		</para>
	</section>
	</section>


	<section>
	<title>Exported Parameters</title>

	<section>
		<title><varname>db_url</varname> (string)</title>
		<para>
		The URL pointing to the database where the load-balancing rules 
		are stored.
		</para>
		<para>
		<emphasis>
			Default value is <quote>&defaultdb;</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>db_url</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("load_balancer", "db_url", "&exampledb;")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>db_table</varname> (string)</title>
		<para>
		The name of the DB table containing the load-balancing rules.
		</para>
		<para>
		<emphasis>
			Default value is <quote>load_balancer</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>db_table</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("load_balancer", "db_table", "lb")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>probing_interval</varname> (integer)</title>
		<para>
		How often (in seconds) the probing of a destination should be done. If
		set to 0, the probing will be disabled as functionality (for all 
		destinations)
		</para>
		<para>
		<emphasis>
			Default value is <quote>30</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>probing_interval</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("load_balancer", "probing_interval", 60)
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>probing_method</varname> (string)</title>
		<para>
		The SIP method to be used for the probing requests.
		</para>
		<para>
		<emphasis>
			Default value is <quote>"OPTIONS"</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>probing_method</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("load_balancer", "probing_method", "INFO")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>probing_from</varname> (string)</title>
		<para>
		The FROM SIP URI to be advertised in the SIP probing requests.
		</para>
		<para>
		<emphasis>
			Default value is <quote>"sip:prober@localhost"</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>probing_from</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("load_balancer", "probing_from", "sip:pinger@192.168.2.10")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>probing_reply_codes</varname> (string)</title>
		<para>
		A comma separted list of SIP reply codes. The codes defined here 
		will be considered as valid reply codes for probing messages,
		apart for 200.
		</para>
		<para>
		<emphasis>
			Default value is <quote>NULL</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>probing_reply_codes</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("load_balancer", "probing_reply_codes", "501, 403")
...
</programlisting>
		</example>
	</section>

	</section>


	<section>
	<title>Exported Functions</title>
	<section>
		<title>
		<function moreinfo="none">load_balance(grp,resources[,alg])</function>
		</title>
		<para>
		The function performs load-balancing over the available destinations in
		order to find the less loaded destination that can provide the 
		requested resources and belong to a requested group.
		</para>
		<para>Meaning of the parameters is as follows:</para>
		<itemizedlist>
		<listitem>
			<para><emphasis>grp</emphasis> - group id for the destinations; the
			destination may be grouped in several groups you can you for 
			differnet scenarios; this can be a number or a variable containing
			a numerical value.
			</para>
		</listitem>
		<listitem>
			<para><emphasis>resources</emphasis> - string containing a 
			semi-colon list of resources required by the current call.
			</para>
		</listitem>
		<listitem>
			<para><emphasis>algorithm</emphasis> - algorithm used for 
			computing the available load on the system:
			</para>
			<itemizedlist>
			<listitem>
				<para><emphasis>0</emphasis> - Absolute value - the effective
				available load ( maximum_load - current_load) is used in
				computing the load of each pear/resource.
				</para>
			</listitem>
			<listitem>
				<para><emphasis>1</emphasis> - Relative value - the relative
				available load (how many percentages are free) is used in
				computing the load of each pear/resource.
				</para>
			</listitem>
			</itemizedlist>
			<para>If missing, the default algorithm in 0.
			</para>
		</listitem>
		</itemizedlist>
		<para>
		Function returns true is a new destination URI is set pointing to the 
		selected destiantion.
		NOTE that the RURI will not be changed by this function.
		</para>
		<para>
		This function can be used from REQUEST_ROUTE, BRANCH_ROUTE and
		FAILURE_ROUTE.
		</para>
		<example>
		<title><function>load_balance</function> usage</title>
		<programlisting format="linespecific">
...
if (load_balance("1","trascoding;conference")) {
	# dst URI points to the new destination
	xlog("sending call to $du\n");
	t_relay();
	exit;
}
...
</programlisting>
		</example>
	</section>

	<section>
		<title>
		<function moreinfo="none">lb_disable()</function>
		</title>
		<para>
		Marks as disabled the last destination that was used for the current
		call. The disabling done via this function will prevent the 
		destination to be used for usage from now on. The probing mechanism
		can re-enable this peer (see the probing section in the begining)
		</para>
		<para>
		This function can be used from REQUEST_ROUTE and FAILURE_ROUTE.
		</para>
		<example>
		<title><function>lb_disable()</function> usage</title>
		<programlisting format="linespecific">
...
if (t_check_status("(408)|(5[0-9][0-9])")) {
	lb_disable();
	if ( load_balance("1","pstn") ) {
		t_on_failure("1");
		xlog("-----------new dst is $du\n");
		t_relay();
	} else {
		t_reply("500","Error");
	}
}

...
</programlisting>
		</example>
	</section>

	</section>


	<section>
	<title>Exported statistics</title>
	<para>
	NONE
	</para>
	</section>


	<section>
	<title>Exported MI Functions</title>

		<section>
		<title><varname>lb_reload</varname></title>
		<para>
		Trigers the reload of the load balancing data from the DB.
		</para>
		<para>
		MI FIFO Command Format:
		</para>
		<programlisting  format="linespecific">
		:lb_reload:_reply_fifo_file_
		_empty_line_
		</programlisting>
		</section>

		<section>
		<title><varname>lb_resize</varname></title>
		<para>
		Changes the capacity for a resource of a destination. The function 
		receives as parameters the ID (as per DB) of the destination along 
		with the name of the resource you want to resize.
		</para>
		<para>
		MI FIFO Command Format:
		</para>
		<programlisting  format="linespecific">
		:lb_resize:_reply_fifo_file_
		11   /*dstination id*/
		voicemail  /*resource name*/
		56   /* new resource capacity*/
		_empty_line_
		</programlisting>
		</section>

		<section>
		<title><varname>lb_list</varname></title>
		<para>
		Lists all the destinations and the maximum and current load for each 
		resource of the destination.
		</para>
		<para>
		MI FIFO Command Format:
		</para>
		<programlisting  format="linespecific">
		:lb_list:_reply_fifo_file_
		_empty_line_
		</programlisting>
		<example>
		<title><function>lb_list</function> usage</title>
		<programlisting format="linespecific">
$ ./opensipsctl fifo lb_list
Destination:: sip:127.0.0.1:5100 id=1 enabled=yes auto-re=on
        Resource:: pstn max=3 load=0
        Resource:: transc max=5 load=1
        Resource:: vm max=5 load=2
Destination:: sip:127.0.0.1:5200 id=2 enabled=no auto-re=on
        Resource:: pstn max=6 load=0
        Resource:: trans max=57 load=0
        Resource:: vm max=5 load=0
</programlisting>
		</example>
		</section>

		<section>
		<title><varname>lb_status</varname></title>
		<para>
		Gets or sets the status (enabled or disabled) of a destination. The 
		function takes 2 parameters, first mandatory, the id of the destiantion
		and second, optional, the new status. If no new status is given, the
		function will return the current status. If a new status is given 
		(0 - disable, 1 - enable), this status will be forced for the 
		destination.
		</para>
		<para>
		MI FIFO Command Format:
		</para>
		<programlisting  format="linespecific">
		:lb_status:_reply_fifo_file_
		id
		status (optional)
		_empty_line_
		</programlisting>
		<example>
		<title><function>lb_status</function> usage</title>
		<programlisting format="linespecific">
$ ./opensipsctl fifo lb_status 2
enable:: no
$ ./opensipsctl fifo lb_status 2 1
$ ./opensipsctl fifo lb_status 2
enable:: yes
</programlisting>
		</example>
	</section>
	</section>


	<section>
	<title>Exported pseudo-variables</title>
	<para>
	NONE
	</para>
	</section>



</chapter>

