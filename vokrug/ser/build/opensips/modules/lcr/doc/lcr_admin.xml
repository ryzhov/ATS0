<!-- Module User's Guide -->

<chapter>
	
	<title>&adminguide;</title>
	
	<section>
	<title>Overview</title>
	<para>
		Least cost routing (LCR) module implements two vaguely
	related capabilities: 
	</para>
	<para>
		<itemizedlist>
			<listitem>
			<para>
				sequential forwarding of a request to one or more gateways
				(functions load_gws and next_gw)
			</para>
			</listitem>
			<listitem>
			<para>
				sequential forwarding to contacts
	according to their q value (functions load_contacts and
	next_contacts).
			</para>
			</listitem>
		</itemizedlist>
	</para>
	<para>
	For the purpose of facilitating least cost routing of requests,
	each gateway belongs to a gateway group and each gateway group
	is associated with one or more &lt;prefix, from pattern, priority&gt;
	tuples.  A gateway matches a request if	user part of Request URI
	matches a prefix and caller's URI matches a from pattern in a
	tuple that belongs to the group of the gateway.
	</para>
	<para>
	Matching gateways are then ordered for forwarding
	purpose (1) according to longest user part match, (2) according to 
	tuple's priority, and (3) randomly (prefix_mode = 0) or (1)
	according to gateway's priority and (2) randomly (prefix_mode =
	1).  In prefix_mode 0, prefix is a string of characters and in
	prefix_mode 1, prefix is a regular expression.  From pattern
	is always a regular expression or empty.  Empty from pattern
	matches anything. Smaller priority value means higher priority
	(highest priority value being 0).
	</para>
	<para>
	When a gateway is selected, Request URI user part is stripped by 
	the number of characters as specified by the gateways strip
	count. Subsequently, Request URI is rewritten based on gateway's
	URI scheme, tag, IP address, port, and transport protocol.  Valid
	URI scheme values are NULL = sip, 1 = sip and 2 = sips.  Tag is
	inserted in front of Request URI user part. Currently valid transport
	protocol values are NULL = none, 1 = udp, 2 = tcp, and 3 = tls.
	</para>
	<para>
	As a side effect of gateway selection, gateway's flags (that may
	contain information about capabilities of the gateway)
	are stored into an AVP.
	</para>
	</section>

	<section>
	<title>Dependencies</title>
	<section>
	<title>&osips; modules</title>
	<para>
		The following modules must be loaded before this module:
		<itemizedlist>
		<listitem>
		<para>
			<emphasis>TM module</emphasis>
		</para>
		</listitem>
		<listitem>
		<para>
			<emphasis>A database module like mysql, postgres or 
			dbtext</emphasis>.
		</para>
		</listitem>
		</itemizedlist>
	</para>
	</section>
	<section>
	<title>External libraries or applications</title>
	<para>
		The following libraries or applications must be installed before
		running &osips; with this module:
			<itemizedlist>
			<listitem>
			<para>
				<emphasis>none</emphasis>.
			</para>
			</listitem>
			</itemizedlist>
	</para>
	</section>
	</section>

	<section>
	<title>Exported Parameters</title>
	<section>
		<title><varname>db_url</varname> (string)</title>
		<para>
		&url; of the database table to be used.
		</para>
		<para>
		<emphasis>
			Default value is 
			<quote>&defaultrodb;</quote>.
		</emphasis>
		</para>
		<example>
		<title>Setting <varname>db_url</varname> module parameter</title>
		<programlisting format="linespecific">
...
modparam("lcr","db_url","&exampledb;")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>gw_table</varname> (string)</title>
		<para>
		Name of the table holding the gateways definitions.
		</para>
		<para>
		<emphasis>
			Default value is <quote>gw</quote>.
		</emphasis>
		</para>
		<example>
		<title>Setting <varname>gw_table</varname> module parameter</title>
		<programlisting format="linespecific">
...
modparam("lcr","gw_table","gw")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>gw_name_column</varname> (string)</title>
		<para>
		Name of the column holding the gateway name.
		</para>
		<para>
		<emphasis>
			Default value is <quote>gw_name</quote>.
		</emphasis>
		</para>
		<example>
		<title>Setting <varname>gw_name_column</varname> module parameter</title>
		<programlisting format="linespecific">
...
modparam("lcr","gw_name_column","gw_name")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>grp_id_column</varname> (string)</title>
		<para>
		Name of the column holding the group ID of gateway both
		in gw and lcr tables.
		</para>
		<para>
		<emphasis>
			Default value is <quote>grp_id</quote>.
		</emphasis>
		</para>
		<example>
		<title>Setting <varname>grp_id_column</varname> module parameter</title>
		<programlisting format="linespecific">
...
modparam("lcr","grp_id_column","grp_id")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>ip_addr_column</varname> (string)</title>
		<para>
		Name of the column holding the IP address of the gateway.
		</para>
		<para>
		<emphasis>
			Default value is <quote>ip_addr</quote>.
		</emphasis>
		</para>
		<example>
		<title>Setting <varname>ip_addr_column</varname> module parameter</title>
		<programlisting format="linespecific">
...
modparam("lcr","ip_addr_column","ip_addr")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>port_column</varname> (string)</title>
		<para>
		Name of the column holding the port number of the gateway.
		</para>
		<para>
		<emphasis>
			Default value is <quote>port</quote>.
		</emphasis>
		</para>
		<example>
		<title>Setting <varname>port_column</varname> module parameter</title>
		<programlisting format="linespecific">
...
modparam("lcr","port_column","port")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>uri_scheme_column</varname> (string)</title>
		<para>
		Name of the column holding the uri scheme of the gateway.
		</para>
		<para>
		<emphasis>
			Default value is <quote>uri_scheme</quote>.
		</emphasis>
		</para>
		<example>
		<title>Setting <varname>uri_scheme_column</varname> module 
		parameter</title>
		<programlisting format="linespecific">
...
modparam("lcr","uri_scheme_column","scheme")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>transport_column</varname> (string)</title>
		<para>
		Name of the column holding the transport type to be used for 
		the gateway.
		</para>
		<para>
		<emphasis>
			Default value is <quote>transport</quote>.
		</emphasis>
		</para>
		<example>
		<title>Setting <varname>transport_column</varname> module 
		parameter</title>
		<programlisting format="linespecific">
...
modparam("lcr","transport_column","transport")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>strip_column</varname> (string)</title>
		<para>
		Name of the column holding the number of characters
		to be stripped from the front of Request URI user part
		before inserting tag.
		</para>
		<para>
		<emphasis>
			Default value is <quote>strip</quote>.
		</emphasis>
		</para>
		<example>
		<title>Setting <varname>strip_column</varname> module 
		parameter</title>
		<programlisting format="linespecific">
...
modparam("lcr","strip_column","strip_count")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>tag_column</varname> (string)</title>
		<para>
		Name of the column holding gateway specific tag string.
		</para>
		<para>
		<emphasis>
			Default value is <quote>tag</quote>.
		</emphasis>
		</para>
		<example>
		<title>Setting <varname>tag_column</varname> module parameter</title>
		<programlisting format="linespecific">
...
modparam("lcr","tag_column","gw_tag")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>flags_column</varname> (string)</title>
		<para>
		Name of the column holding gateway specific flag values.
		</para>
		<para>
		<emphasis>
			Default value is <quote>flags</quote>.
		</emphasis>
		</para>
		<example>
		<title>Setting <varname>flags_column</varname> module parameter</title>
		<programlisting format="linespecific">
...
modparam("lcr","flags_column","gw_flags")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>lcr_table</varname> (string)</title>
		<para>
		Name of the table holding the LCR rules.
		</para>
		<para>
		<emphasis>
			Default value is <quote>lcr</quote>.
		</emphasis>
		</para>
		<example>
		<title>Setting <varname>lcr_table</varname> module parameter</title>
		<programlisting format="linespecific">
...
modparam("lcr","lcr_table","lcr")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>prefix_column</varname> (string)</title>
		<para>
		Name of the column holding prefix of Request URI user
		part.
		</para>
		<para>
		<emphasis>
			Default value is <quote>prefix</quote>.
		</emphasis>
		</para>
		<example>
		<title>Setting <varname>prefix_column</varname> module parameter</title>
		<programlisting format="linespecific">
...
modparam("lcr","prefix_column","prefix")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>from_uri_column</varname> (string)</title>
		<para>
		Name of the column holding the FROM (source) URI.
		</para>
		<para>
		<emphasis>
			Default value is <quote>from_uri</quote>.
		</emphasis>
		</para>
		<example>
		<title>Setting <varname>from_uri_column</varname> module parameter</title>
		<programlisting format="linespecific">
...
modparam("lcr","from_uri_column","from_uri")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>priority_column</varname> (string)</title>
		<para>
		Name of the column holding the priority of the rule.
		</para>
		<para>
		<emphasis>
			Default value is <quote>priority</quote>.
		</emphasis>
		</para>
		<example>
		<title>Setting <varname>priority_column</varname> module parameter
			</title>
		<programlisting format="linespecific">
...
modparam("lcr","priority_column","priority")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>contact_avp</varname> (AVP string)</title>
		<para>
		Internal AVP that load_contacts function uses to store
		contacts of the destination set.
		</para>
		<para>
		<emphasis>
			There is NO default value, thus this variable must
			be defined in opensips.cfg.
		</emphasis>
		</para>
		<example>
		<title>Setting <varname>contact_avp</varname> module parameter</title>
		<programlisting format="linespecific">
...
modparam("lcr", "contact_avp", "$avp(i:711)")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>fr_inv_timer_avp</varname> (AVP string)</title>
		<para>
		An AVP that contains a final response timeout
		for INVITEs.  Its value must be the same as that of the
		corresponding tm module parameter.
		</para>
		<para>
		<emphasis>
			There is NO default value, thus this variable must
			be defined in opensips.cfg.
		</emphasis>
		</para>
		<example>
		<title>Setting <varname>fr_inv_timer_avp</varname> module parameter</title>
		<programlisting format="linespecific">
...
modparam("lcr|tm", "fr_inv_timer_avp", "$avp(i:704)")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>gw_uri_avp</varname> (AVP string)</title>
		<para>
   Internal AVP that load_gws function uses to store information of
   matching gateways.
		</para>
		<para>
		<emphasis>
			There is NO default value, thus this variable must
			be defined in opensips.cfg.
		</emphasis>
		</para>
		<example>
		<title>Setting <varname>gw_uri_avp</varname> module parameter</title>
		<programlisting format="linespecific">
...
modparam("lcr", "gw_uri_avp", "$avp(i:709)")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>rpid_avp</varname> (AVP string)</title>
		<para>
		An AVP that contains caller's RPID (if any).
		</para>
		<para>
		<emphasis>
			There is NO default value, thus this variable must
			be defined in opensips.cfg.
		</emphasis>
		</para>
		<example>
		<title>Setting <varname>rpid_avp</varname> module parameter</title>
		<programlisting format="linespecific">
...
modparam("^auth$|lcr", "rpid_avp", "$avp(i:302)")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>ruri_user_avp</varname> (AVP string)</title>
		<para>
   Internal AVP that next_gw function uses to store Request-URI user for
   subsequent next_gw calls.
		</para>
		<para>
		<emphasis>
			There is NO default value, thus this variable must
			be defined in opensips.cfg.
		</emphasis>
		</para>
		<example>
		<title>Setting <varname>ruri_user_avp</varname> module parameter</title>
		<programlisting format="linespecific">
...
modparam("lcr", "ruri_user_avp", "$avp(i:500)")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>fr_inv_timer</varname> (integer)</title>
		<para>
		Sets the value of the fist INVITE's Final Response timeout to be used 
		during sequential forwarding:
		</para>
		<para>
		<emphasis>
			Default value is 90.
		</emphasis>
		</para>
		<example>
		<title>Setting <varname>fr_inv_timer</varname> module parameter</title>
		<programlisting format="linespecific">
...
modparam("lcr","fr_inv_timer",90)
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>fr_inv_timer_next</varname> (integer)</title>
		<para>
		Sets the value of the next INVITE's Final Response timeouts to be used 
		during sequential forwarding:
		</para>
		<para>
		Function next_contacts() sets tm fr_inv_timer to fr_inv_timer_next
		value if, after next contacts, there are still lower qvalue
		contacts available, and to fr_inv_timer value if next contacts are
		the last ones left.
		</para>
		<para>
		<emphasis>
			Default value is 30.
		</emphasis>
		</para>
		<example>
		<title>Setting <varname>fr_inv_timer_next</varname> module parameter</title>
		<programlisting format="linespecific">
...
modparam("lcr","fr_inv_timer_next",30)
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>flags_avp</varname> (AVP string)</title>
		<para>
		An AVP where successful next_gw and from_gw functions
		store gateway's flags.
		</para>
		<para>
		<emphasis>
			There is NO default value, thus this variable must
			be defined in opensips.cfg.
		</emphasis>
		</para>
		<example>
		<title>Setting <varname>flags_avp</varname> module parameter</title>
		<programlisting format="linespecific">
...
modparam("lcr", "flags_avp", "$avp(i:712)")
...
</programlisting>
		</example>
	</section>

	<section>
		<title><varname>prefix_mode</varname> (integer)</title>
		<para>
		Defines the prefix mode: string or regular expression.
		When set to 0, the prefix mode is set to string and
		matching is implemented as a simple string comparison. 
		When set to 1, the prefix mode is
		set to regex and matching is implemented as regular
		expression match.
		</para>
		<para>
		<emphasis>
			Default value is 0.
		</emphasis>
		</para>
		<example>
		<title>Setting <varname>prefix_mode</varname> module parameter</title>
		<programlisting format="linespecific">
...
/* Turning on the regex mode for prefix */
modparam("lcr", "prefix_mode", 1)
...
</programlisting>
                </example>
	</section>
	</section>

	<section>
	<title>Exported Functions</title>
	<section>
		<title>
		<function moreinfo="none">load_gws([pvar])</function>
		</title>
		<para>
		Loads URI schemes, addresses, ports, and transports of
		matching gateways to gw_uri_avp AVPs
		(see Overview section). If optional pseudo variable
		argument is included, caller's URI is taken from it.
		If pseudo variable argument is not included, caller's
		URI is taken from rpid_avp AVP or, if rpid_avp value is
		empty, from From URI. Returns 1 or -1 depending on success.
		</para>
		<para>
		This function can be used from REQUEST_ROUTE.
		</para>
		<example>
		<title><function>load_gws</function> usage</title>
		<programlisting format="linespecific">
...
if (!load_gws("$var(caller_uri)")) {
	sl_send_reply("500", "Server Internal Error - Cannot load gateways");
	exit;
};
...
</programlisting>
		</example>
	</section>
	<section>
		<title>
		<function moreinfo="none">load_gws_from_grp(group-id)</function>
		</title>
		<para>
		Loads URI schemes, addresses, ports, and transports of
		matching gateways to gw_uri_avp AVPs
		(see Overview section), but only gateways belonging to the
		group given in group-id argument are loaded.  group-id
		argument is
		a string and may contain pseudo-variables that are
		replaced at runtime.  Caller's
		URI is taken from rpid_avp AVP or, if rpid_avp value is
		empty, from From URI. Returns 1 or -1 depending on success. 
		</para>
		<para>
		This function can be used from REQUEST_ROUTE.
		</para>
		<example>
		<title><function>load_gws_from_grp</function> usage</title>
		<programlisting format="linespecific">
...
if (!load_gws_from_grp("1")) {
	sl_send_reply("500", "Server Internal Error - Cannot load gateways from group 1");
	exit;
};
...

if (!load_gws_from_grp("$avp(s:gateway_group)")) {
	sl_send_reply("500", "Server Internal Error - Cannot load gateways");
	exit;
};
...
</programlisting>
		</example>
	</section>
	<section>
		<title>
		<function moreinfo="none">next_gw()</function>
		</title>	
		<para>
		Replaces URI scheme, host, port, and transport of Request-URI by the 
		values stored in first gw_uri_avp AVP and destroys that AVP.  If 
		called first time, it also saves the user part of Request-URI into
		ruri_user_avp AVP for use in subsequent next_gw() calls.
		</para>
		<para>
		As a side effect, stores gateway's flags to flags_avp.
		</para>
		<para>
		Returns 1 on success and -1 if there were no gateways left or if an
		error occurred (see syslog).
		</para>
		<para>
		Must be preceded by successful load_gws() call.
		</para>
		<para>
		This function can be used from REQUEST_ROUTE, FAILURE_ROUTE.
		</para>
		<example>
		<title><function>next_gw</function> usage from a route block</title>
		<programlisting format="linespecific">
...
if (!next_gw()) {
	sl_send_reply("503", "Service not available - No gateways");
	exit;
};
...
</programlisting>
		</example>
		<example>
		<title><function>next_gw</function> usage from a failure route block
			</title>
		<programlisting format="linespecific">
...
if (!next_gw()) {
	t_reply("503", "Service not available - No more gateways");
	exit;
};
...
</programlisting>
		</example>
	</section>
	<section>
		<title>
		<function moreinfo="none">from_gw([pvar])</function>
		</title>
		<para>
			Checks if request came from IP address of a
			gateway.  IP address to be checked is either
			taken from source IP address of the request or
			(if present) from pseudo variable argument.
			As a side effect, stores gateway's flags to
			flags_avp.
		</para>
		<para>
		This function can be used from REQUEST_ROUTE, FAILURE_ROUTE,
		ONREPLY_ROUTE.
		</para>
		<example>
		<title><function>from_gw</function> usage</title>
		<programlisting format="linespecific">
...
if (from_gw()) {
	...
};
...
</programlisting>
		</example>
		<example>
		<title><function>from_gw</function> usage with pseudo
		variable argument</title>
		<programlisting format="linespecific">
...
if (from_gw("$si")) {
	...
};
...
</programlisting>
		</example>
		</section>
	<section>
		<title>
		<function moreinfo="none">from_gw_grp(group-id)</function>
		</title>
		<para>
			Checks if request came from IP address of a
			gateway that belongs to the given group.  Sets
			or resets a message flag depending on whether
			the gateway supports directed media. 
		</para>
		<para>
		This function can be used from REQUEST_ROUTE, FAILURE_ROUTE,
		ONREPLY_ROUTE.
		</para>
		<example>
		<title><function>from_gw_grp</function> usage</title>
		<programlisting format="linespecific">
...
if (from_gw_grp("1")) {
	...
};
...
</programlisting>
		</example>
		</section>
		<section>
		<title>
		<function moreinfo="none">to_gw([group-id])</function>
		</title>
		<para>
			Checks if in-dialog request goes to a gateway. If an optional
			group-id is given, only gateways belonging to this group
			are checked.
		</para>
		<para>
		This function can be used from REQUEST_ROUTE, FAILURE_ROUTE.
		</para>
		<example>
		<title><function>to_gw</function> usage</title>
		<programlisting format = "linespecific">
...
if (to_gw()) {
	...
	exit;
};
...
</programlisting>
		</example>
		<example>
		<title><function>to_gw</function> usage with group-id</title>
		<programlisting format = "linespecific">
...
if (to_gw("1")) {
	...
	exit;
};
...
</programlisting>
		</example>
	</section>
	<section>
		<title>
		<function moreinfo="none">load_contacts()</function>
		</title>
		<para>
		Loads contacts in destination set in increasing qvalue order as
		values of lcr_contact AVP.  If all contacts in the destination set
		have the same qvalue, load_contacts() does not do anything thus
		minimizing performance impact of sequential forking capability when
		it is not needed.  Returns 1 if loading of contacts succeeded or
		there was nothing to do.  Returns -1 on error (see syslog).
		</para>
		<para>
		This function can be used from REQUEST_ROUTE.
		</para>
		<example>
		<title><function>load_contacts</function> usage</title>
		<programlisting format = "linespecific">
...
if (!load_contacts()) {
	sl_send_reply("500", "Server Internal Error - Cannot load contacts");
	exit;
};
...
</programlisting>
		</example>
	</section>
	<section>
		<title>
		<function moreinfo="none">next_contacts()</function>
		</title>
		<para>
		If called from a route block, replaces Request-URI with the first
		lcr_contact AVP value, adds the remaining lcr_contact AVP values 
		with the same qvalue as branches, and destroys those AVPs. It does
		nothing if there are no lcr_contact AVPs.  Returns 1 if there were 
		no errors and -1 if an error occurred (see syslog).
		</para>
		<para>
		If called from a failure route block, adds the first lcr_contact 
		AVP value and all following lcr_contact AVP values with the same 
		qvalue as new branches to request and destroys those AVPs. 
		Returns 1 if new branches were successfully added and -1 on error 
		(see syslog) or if there were no more lcr_contact AVPs.
		</para>
		<para>
		Must be preceded by successful load_contacts() call.
		</para>
		<para>
		This function can be used from REQUEST_ROUTE, FAILURE_ROUTE.
		</para>
		<example>
		<title><function>next_contacts</function> usage from route block
		</title>
		<programlisting format = "linespecific">
...
if (!next_contacts()) {
	sl_send_reply("500", "Server Internal Error");
	exit;
} else {
	t_relay();
};
...
</programlisting>
		</example>
		<example>
		<title><function>next_contacts</function> usage from 
			failure route block
		</title>
		<programlisting format = "linespecific">
if (next_contacts()) {
	t_relay();
};
</programlisting>
		</example>
		</section>
	</section>

	<section>
	<title>Exported MI Commands</title>
		<section>
		<title><function>lcr_reload</function></title>
		<para>
			Causes lcr module to re-read the contents of gateway table
			into memory.
		</para>
		<para>
		Name: <emphasis>lcr_reload</emphasis>
		</para>
		<para>Parameters: <emphasis>none</emphasis></para>
 		<para>
		MI FIFO Command Format:
		</para>
        <programlisting  format="linespecific">
		:lcr_reload:_reply_fifo_file_
		_empty_line_
		</programlisting>
		
		</section>
		
		<section>
		<title><function>lcr_dump</function></title>
		<para>
			Causes lcr module to dump the contents of its in-memory gateway
			table. 
		</para>
		<para>
		Name: <emphasis>lcr_dump</emphasis>
		</para>
		<para>Parameters: <emphasis>none</emphasis></para>
 		<para>
		MI FIFO Command Format:
		</para>
        <programlisting  format="linespecific">
		:lcr_dump:_reply_fifo_file_
		_empty_line_
		</programlisting>
		
		</section>
	</section>
	<section>
	<title>Known Limitations</title>
	<para>
		There is an unlikely race condition on lcr reload. If a process uses
		in memory gw table, which is reloaded at the same time twice through
		FIFO, the second reload will delete the original table still in use
		by the process.
	</para>
	</section>

</chapter>

